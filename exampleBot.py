from telegram.ext import Application, CommandHandler
import sys
print(f"Python version: {sys.version}")
print(f"Python path: {sys.path}")
try:
    import telegram
    print(f"Telegram module found at: {telegram.__file__}")
except ImportError as e:
    print(f"Error importing telegram: {e}")

# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from telegram.ext import Application, CommandHandler

from dotenv import load_dotenv
import os
import logging
import requests
import signal
import sys
import time
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.environ.get('BOT_TOKEN')
OPENWEATHER_API_KEY= os.environ.get('OPENWEATHER_API_KEY')

if not TOKEN:
    raise ValueError('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω')

# –°–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ–¥–æ–≤ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
CITIES = {
    'taganrog': {'name': '–¢–∞–≥–∞–Ω—Ä–æ–≥', 'lat': 47.2362, 'lon': 38.8969},
    'matveev_kurgan': {'name': '–ú–∞—Ç–≤–µ–µ–≤-–ö—É—Ä–≥–∞–Ω', 'lat': 47.5667, 'lon': 38.8667},
    'natalyevka': {'name': '–ù–∞—Ç–∞–ª—å–µ–≤–∫–∞', 'lat': 47.1631, 'lon': 38.6531},
    'rostov': {'name': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 'lat': 47.2357, 'lon': 39.7015},
    'sochi': {'name': '–°–æ—á–∏', 'lat': 43.6028, 'lon': 39.7342}
}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {'city_key': {'data': {...}, 'timestamp': datetime, 'source': 'api'}}
WEATHER_CACHE = {}

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
CACHE_TTL = 30

# –°—á–µ—Ç—á–∏–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤
API_REQUESTS_COUNT = 0
API_REQUESTS_RESET_DATE = datetime.now()
API_REQUESTS_LIMIT = 950  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —á—É—Ç—å –Ω–∏–∂–µ 1000 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def get_weather(city_key='taganrog', max_retries=3, retry_delay=2, force_refresh=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    global API_REQUESTS_COUNT, API_REQUESTS_RESET_DATE
    
    if city_key not in CITIES:
        logger.error(f"–ì–æ—Ä–æ–¥ {city_key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    city = CITIES[city_key]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    current_time = datetime.now()
    if not force_refresh and city_key in WEATHER_CACHE:
        cache_entry = WEATHER_CACHE[city_key]
        cache_age = current_time - cache_entry['timestamp']
        
        # –ï—Å–ª–∏ –∫—ç—à –Ω–µ —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if cache_age < timedelta(minutes=CACHE_TTL):
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {city['name']} (–≤–æ–∑—Ä–∞—Å—Ç: {cache_age})")
            return cache_entry
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ
    if current_time.month != API_REQUESTS_RESET_DATE.month:
        logger.info("–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–æ–≤—ã–π –º–µ—Å—è—Ü)")
        API_REQUESTS_COUNT = 0
        API_REQUESTS_RESET_DATE = current_time
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
    if OPENWEATHER_API_KEY and API_REQUESTS_COUNT < API_REQUESTS_LIMIT:
        lat = city['lat']
        lon = city['lon']
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        
        for attempt in range(max_retries):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API #{attempt+1} –¥–ª—è {city['name']}")
                response = requests.get(url, timeout=10)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
                API_REQUESTS_COUNT += 1
                logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {API_REQUESTS_COUNT}/{API_REQUESTS_LIMIT} API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")
                
                if response.status_code == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
                    result = {'data': response.json(), 'city': city['name'], 'source': 'api', 'timestamp': current_time}
                    WEATHER_CACHE[city_key] = result
                    return result
                elif response.status_code == 429:  # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
                    time.sleep(retry_delay * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    logger.warning(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}: {response.text}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
            except requests.exceptions.Timeout:
                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API: {e}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
    else:
        if API_REQUESTS_COUNT >= API_REQUESTS_LIMIT:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ ({API_REQUESTS_LIMIT}). –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.")
        elif not OPENWEATHER_API_KEY:
            logger.warning("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.")
    
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city['name']}")
    mock_data = {
        'taganrog': {
            'temp': 12.3, 'feels_like': 10.8, 'humidity': 65, 
            'pressure': 1018, 'description': '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', 'wind_speed': 2.1
        },
        'matveev_kurgan': {
            'temp': 11.5, 'feels_like': 9.7, 'humidity': 68, 
            'pressure': 1017, 'description': '–æ–±–ª–∞—á–Ω–æ', 'wind_speed': 3.2
        },
        'natalyevka': {
            'temp': 12.8, 'feels_like': 11.2, 'humidity': 63, 
            'pressure': 1018, 'description': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'wind_speed': 1.8
        },
        'rostov': {
            'temp': 13.5, 'feels_like': 12.1, 'humidity': 60, 
            'pressure': 1016, 'description': '—è—Å–Ω–æ', 'wind_speed': 2.5
        },
        'sochi': {
            'temp': 18.2, 'feels_like': 17.5, 'humidity': 72, 
            'pressure': 1014, 'description': '—Å–æ–ª–Ω–µ—á–Ω–æ', 'wind_speed': 1.5
        }
    }
    
    mock = mock_data.get(city_key, mock_data['taganrog'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
    result = {
        'data': {
            'main': {
                'temp': mock['temp'],
                'feels_like': mock['feels_like'],
                'humidity': mock['humidity'],
                'pressure': mock['pressure']
            },
            'weather': [{'description': mock['description']}],
            'wind': {'speed': mock['wind_speed']}
        },
        'city': city['name'],
        'source': 'mock',
        'timestamp': current_time
    }
    WEATHER_CACHE[city_key] = result
    return result

async def send_weather(update, context, city_key):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_key}")
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ... ‚è≥"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    force_refresh = False
    if context.args and 'force' in context.args:
        force_refresh = True
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    weather_data = get_weather(city_key, force_refresh=force_refresh)
    
    if weather_data:
        data = weather_data['data']
        city = weather_data['city']
        source = weather_data['source']
        timestamp = weather_data['timestamp']
        
        main = data.get('main', {})
        weather = data.get('weather', [{}])[0]
        wind = data.get('wind', {})
        
        temp = main.get('temp')
        feels_like = main.get('feels_like')
        humidity = main.get('humidity')
        pressure = main.get('pressure')
        description = weather.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        wind_speed = wind.get('speed', 0)
        
        source_emoji = "üåê" if source == 'api' else "üîß"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_time = timestamp.strftime("%H:%M:%S")
        
        message = f"{source_emoji} –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n" \
                 f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n" \
                 f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n" \
                 f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n" \
                 f"üìà –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n" \
                 f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n" \
                 f"üìä –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n" \
                 f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}"
        
        if source == 'mock':
            message += "\n‚ö†Ô∏è –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤)"
    else:
        message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)

async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=f"–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}! üå§\n\n"
             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             f"/weather - –ø–æ–≥–æ–¥–∞ –≤ –¢–∞–≥–∞–Ω—Ä–æ–≥–µ\n"
             f"/weather_matveev - –ø–æ–≥–æ–¥–∞ –≤ –ú–∞—Ç–≤–µ–µ–≤-–ö—É—Ä–≥–∞–Ω–µ\n"
             f"/weather_natalyevka - –ø–æ–≥–æ–¥–∞ –≤ –ù–∞—Ç–∞–ª—å–µ–≤–∫–µ\n"
             f"/weather_rostov - –ø–æ–≥–æ–¥–∞ –≤ –†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É\n"
             f"/weather_sochi - –ø–æ–≥–æ–¥–∞ –≤ –°–æ—á–∏\n"
             f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API\n\n"
             f"–î–æ–±–∞–≤—å—Ç–µ 'force' –∫ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö,\n"
             f"–Ω–∞–ø—Ä–∏–º–µ—Ä: /weather force"
    )

async def stats(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    days_left = 30 - datetime.now().day
    
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API:\n\n" \
             f"üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {API_REQUESTS_COUNT}/{API_REQUESTS_LIMIT}\n" \
             f"üìÖ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑: {days_left} –¥–Ω–µ–π\n" \
             f"‚è± –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞: {CACHE_TTL} –º–∏–Ω—É—Ç"
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)

async def weather_command(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –¢–∞–≥–∞–Ω—Ä–æ–≥–µ"""
    await send_weather(update, context, 'taganrog')

async def weather_matveev(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –ú–∞—Ç–≤–µ–µ–≤-–ö—É—Ä–≥–∞–Ω–µ"""
    await send_weather(update, context, 'matveev_kurgan')

async def weather_natalyevka(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –ù–∞—Ç–∞–ª—å–µ–≤–∫–µ"""
    await send_weather(update, context, 'natalyevka')

async def weather_rostov(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É"""
    await send_weather(update, context, 'rostov')

async def weather_sochi(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –°–æ—á–∏"""
    await send_weather(update, context, 'sochi')

async def health_check(context):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if OPENWEATHER_API_KEY:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ping –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å—á–µ—Ç—á–∏–∫–∞
            response = requests.head("https://api.openweathermap.org/", timeout=5)
            if response.status_code < 400:
                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ API —É—Å–ø–µ—à–Ω–∞")
            else:
                logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {e}")
    else:
        logger.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–æ–ø—É—â–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –≤ —Ñ–∞–π–ª
    try:
        with open("api_stats.txt", "w") as f:
            f.write(f"–ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {API_REQUESTS_COUNT}/{API_REQUESTS_LIMIT}\n")
            f.write(f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞: {API_REQUESTS_RESET_DATE}\n")
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('weather', weather_command))
    app.add_handler(CommandHandler('weather_matveev', weather_matveev))
    app.add_handler(CommandHandler('weather_natalyevka', weather_natalyevka))
    app.add_handler(CommandHandler('weather_rostov', weather_rostov))
    app.add_handler(CommandHandler('weather_sochi', weather_sochi))
    app.add_handler(CommandHandler('stats', stats))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    job_queue = app.job_queue
    job_queue.run_repeating(health_check, interval=3600)  # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        if os.path.exists("api_stats.txt"):
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API")
            with open("api_stats.txt", "r") as f:
                lines = f.readlines()
                if lines and len(lines) >= 1:
                    count_line = lines[0].strip()
                    if "–ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:" in count_line:
                        count_str = count_line.split(":")[1].strip().split("/")[0]
                        global API_REQUESTS_COUNT
                        API_REQUESTS_COUNT = int(count_str)
                        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ API: {API_REQUESTS_COUNT}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    logger.info('–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')
    
    try:
        app.run_polling()
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞: {e}')

if __name__ == '__main__':
    main()

